{
  "address": "0x6A8A356C2Fdb6d4004e785ADd08Af7e085a1432a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DUPLICATE_RECIPIENT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_RECIPIENT_COUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_SPLIT_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_INPUT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_RECIPIENT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ONLY_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TRANSFER_FAILED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Erc20Split",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Erc20SplitEqual",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "EthSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "EthSplitEqual",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "splitERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "splitETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "splitEqualERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "splitEqualETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf9226359bea0fec3d9b8d520db9e303688f4eb93d90886f39593cee7c0b9312f",
  "receipt": {
    "to": null,
    "from": "0x5F1b4cFfD8B7B3653197149bC046C493060B0bd7",
    "contractAddress": "0x534926Ad07FbdAA49C807F48D70207e01D038FD7",
    "transactionIndex": 22,
    "gasUsed": "1198264",
    "logsBloom": "0x
    "blockHash": "0x814add200c254dcb916cc11795d8dbc395fd5286fadbbfaf9ff4325c3ddce6fa",
    "transactionHash": "0xf9226359bea0fec3d9b8d520db9e303688f4eb93d90886f39593cee7c0b9312f",
    "logs": [],
    "blockNumber": 34427536,
    "cumulativeGasUsed": "3820542",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "79141e6a18da172dc4733ef7cd5e2b49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DUPLICATE_RECIPIENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_RECIPIENT_COUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_SPLIT_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_INPUT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_RECIPIENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ONLY_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TRANSFER_FAILED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Erc20Split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Erc20SplitEqual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"EthSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"EthSplitEqual\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"splitERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"splitETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"splitEqualERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"splitEqualETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This is intended for research and development purposes only. Use this contract at your own risk and discretion.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"splitERC20(address,address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts each recipient shall receive\",\"recipients\":\"The noble recipients of the ERC20 tokens\",\"token\":\"The token of friendship to be shared amongst the recipients\"}},\"splitETH(address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts each recipient shall receive\",\"recipients\":\"The noble recipients of the ETH\"}},\"splitEqualERC20(address,address[],uint256)\":{\"params\":{\"recipients\":\"The noble recipients of the ERC20 tokens\",\"token\":\"The token of friendship to be shared amongst the recipients\",\"totalAmount\":\"The total amount to be shared\"}},\"splitEqualETH(address[])\":{\"details\":\"The contract gracefully adds any leftover dust to the amount to be received by the first recipient in the input array.\",\"params\":{\"recipients\":\"The noble recipients of the ETH\"}},\"withdraw(address)\":{\"params\":{\"token\":\"The address of the ERC20 token, or 0 for ETH\"}}},\"title\":\"ETHSplitter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"The constructor sets the owner of the contract\"},\"splitERC20(address,address[],uint256[])\":{\"notice\":\"Splits the ERC20 tokens amongst the given recipients, according to the specified amounts\"},\"splitETH(address[],uint256[])\":{\"notice\":\"Splits the ETH amongst the given recipients, according to the specified amounts\"},\"splitEqualERC20(address,address[],uint256)\":{\"notice\":\"Splits the ERC20 tokens equally amongst the given recipients\"},\"splitEqualETH(address[])\":{\"notice\":\"Splits the ETH equally amongst the given recipients\"},\"withdraw(address)\":{\"notice\":\"Withdraws the remaining ETH or ERC20 tokens to the owner's address\"}},\"notice\":\"A smart contract to split ETH or ERC20 tokens between multiple recipients.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Splitter.sol\":\"ETHSplitter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Splitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title ETHSplitter\\n * @notice A smart contract to split ETH or ERC20 tokens between multiple recipients.\\n * @dev This is intended for research and development purposes only. Use this contract at your\\n * own risk and discretion.\\n */\\n\\ncontract ETHSplitter is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  address immutable _owner;\\n\\n  // Events\\n  event EthSplit(address indexed sender, uint256 totalAmount, address payable[] recipients, uint256[] amounts);\\n  event EthSplitEqual(address indexed sender, uint256 totalAmount, address payable[] recipients);\\n  event Erc20Split(address indexed sender, address payable[] recipients, uint256[] amounts, IERC20 token);\\n  event Erc20SplitEqual(address indexed sender, uint256 totalAmount, address payable[] recipients, IERC20 token);\\n\\n  //*********************************************************************//\\n  // --------------------------- custom errors ------------------------- //\\n  //*********************************************************************//\\n  error INVALID_INPUT();\\n  error INSUFFICIENT_RECIPIENT_COUNT();\\n  error INVALID_RECIPIENT();\\n  error INSUFFICIENT_SPLIT_AMOUNT();\\n  error ONLY_OWNER();\\n  error TRANSFER_FAILED();\\n  error DUPLICATE_RECIPIENT();\\n\\n  /**\\n   * @notice The constructor sets the owner of the contract\\n   */\\n  constructor() {\\n    _owner = msg.sender;\\n  }\\n\\n  /**\\n   * @notice A modifier to ensure that only the owner can perform certain actions\\n   */\\n  modifier onlyOwner() {\\n    if (msg.sender != _owner) revert ONLY_OWNER();\\n    _;\\n  }\\n\\n  /**\\n   * @notice A modifier to check for duplicates and revert before execute a function\\n   */\\n\\n  modifier checkForDuplicates(address payable[] calldata recipients) {\\n    uint256 length = recipients.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      for (uint256 j = i + 1; j < length; j++) {\\n        if (recipients[i] == recipients[j]) {\\n          revert DUPLICATE_RECIPIENT();\\n        }\\n      }\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Splits the ETH amongst the given recipients, according to the specified amounts\\n   * @param recipients The noble recipients of the ETH\\n   * @param amounts The amounts each recipient shall receive\\n   */\\n  function splitETH(\\n    address payable[] calldata recipients,\\n    uint256[] calldata amounts\\n  ) external payable nonReentrant checkForDuplicates(recipients) {\\n    uint256 remainingAmount = _splitETH(recipients, amounts, msg.value);\\n    emit EthSplit(msg.sender, msg.value, recipients, amounts);\\n\\n    if (remainingAmount > 0) {\\n      (bool success, ) = msg.sender.call{value: remainingAmount, gas: 20000}(\\\"\\\");\\n      if (!success) revert TRANSFER_FAILED();\\n    }\\n  }\\n\\n  /**\\n   * @notice Splits the ETH equally amongst the given recipients\\n   * @dev The contract gracefully adds any leftover dust to the amount to be received by the first recipient in the input array.\\n   * @param recipients The noble recipients of the ETH\\n   */\\n\\n  function splitEqualETH(\\n    address payable[] calldata recipients\\n  ) external payable nonReentrant checkForDuplicates(recipients) {\\n    uint256 totalAmount = msg.value;\\n    uint256 rLength = recipients.length;\\n    uint256 equalAmount = totalAmount / rLength;\\n    uint256 remainingAmount = totalAmount % rLength;\\n\\n    if (rLength > 25 || rLength < 2) revert INSUFFICIENT_RECIPIENT_COUNT();\\n\\n    for (uint256 i = 0; i < rLength; ) {\\n      if (recipients[i] == address(0)) revert INVALID_RECIPIENT();\\n      uint256 amountToSend = equalAmount;\\n      if (i == 0) {\\n        amountToSend = amountToSend + remainingAmount;\\n      }\\n      (bool success, ) = recipients[i].call{value: amountToSend, gas: 20000}(\\\"\\\");\\n      if (!success) revert TRANSFER_FAILED();\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit EthSplitEqual(msg.sender, msg.value, recipients);\\n  }\\n\\n  /**\\n   * @notice Splits the ERC20 tokens amongst the given recipients, according to the specified amounts\\n   * @param token The token of friendship to be shared amongst the recipients\\n   * @param recipients The noble recipients of the ERC20 tokens\\n   * @param amounts The amounts each recipient shall receive\\n   */\\n  function splitERC20(\\n    IERC20 token,\\n    address payable[] calldata recipients,\\n    uint256[] calldata amounts\\n  ) external nonReentrant checkForDuplicates(recipients) {\\n    _transferTokensFromSenderToRecipients(token, recipients, amounts);\\n    emit Erc20Split(msg.sender, recipients, amounts, token);\\n  }\\n\\n  /**\\n   * @notice Splits the ERC20 tokens equally amongst the given recipients\\n   * @param token The token of friendship to be shared amongst the recipients\\n   * @param recipients The noble recipients of the ERC20 tokens\\n   * @param totalAmount The total amount to be shared\\n   */\\n  function splitEqualERC20(\\n    IERC20 token,\\n    address payable[] calldata recipients,\\n    uint256 totalAmount\\n  ) external nonReentrant checkForDuplicates(recipients) {\\n    uint256 rLength = recipients.length;\\n\\n    if (rLength > 25 || rLength < 2) revert INSUFFICIENT_RECIPIENT_COUNT();\\n\\n    uint256 equalAmount = totalAmount / rLength;\\n\\n    uint256 remainingAmount = totalAmount % rLength;\\n    for (uint256 i = 0; i < rLength; ) {\\n      if (recipients[i] == address(0)) revert INVALID_RECIPIENT();\\n\\n      uint256 amountToSend = equalAmount;\\n      if (i == 0) {\\n        amountToSend = amountToSend + remainingAmount;\\n      }\\n      SafeERC20.safeTransferFrom(token, msg.sender, recipients[i], amountToSend);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit Erc20SplitEqual(msg.sender, totalAmount, recipients, token);\\n  }\\n\\n  /**\\n   * @notice Internal function to split the ETH amongst the given recipients, according to the specified amounts\\n   * @param recipients The noble recipients of the ETH\\n   * @param amounts The amounts each recipient shall receive\\n   * @param totalAvailable The total available ETH to be split\\n   * @return remainingAmount The remaining ETH dust\\n   */\\n  function _splitETH(\\n    address payable[] calldata recipients,\\n    uint256[] calldata amounts,\\n    uint256 totalAvailable\\n  ) internal returns (uint256 remainingAmount) {\\n    uint256 length = recipients.length;\\n    if (length != amounts.length) revert INVALID_INPUT();\\n\\n    if (length > 25 || length < 2) revert INSUFFICIENT_RECIPIENT_COUNT();\\n\\n    uint256 totalAmount = 0;\\n    for (uint256 i = 0; i < length; ) {\\n      if (recipients[i] == address(0)) revert INVALID_RECIPIENT();\\n      if (amounts[i] == 0) revert INSUFFICIENT_SPLIT_AMOUNT();\\n\\n      totalAmount = totalAmount + amounts[i];\\n\\n      (bool success, ) = recipients[i].call{value: amounts[i], gas: 20000}(\\\"\\\");\\n      if (!success) revert TRANSFER_FAILED();\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    return totalAvailable - totalAmount;\\n  }\\n\\n  /**\\n   * @notice Internal function to transfer ERC20 tokens from the sender to the recipients\\n   * @param erc20Token The ERC20 token to be shared\\n   * @param recipients The noble recipients of the tokens\\n   * @param amounts The amounts each recipient shall receive\\n   */\\n  function _transferTokensFromSenderToRecipients(\\n    IERC20 erc20Token,\\n    address payable[] calldata recipients,\\n    uint256[] calldata amounts\\n  ) internal {\\n    uint256 length = recipients.length;\\n\\n    if (length != amounts.length) revert INVALID_INPUT();\\n    if (length > 25 || length < 2) revert INSUFFICIENT_RECIPIENT_COUNT();\\n\\n    for (uint256 i = 0; i < length; ) {\\n      if (recipients[i] == address(0)) revert INVALID_RECIPIENT();\\n      if (amounts[i] == 0) revert INSUFFICIENT_SPLIT_AMOUNT();\\n\\n      SafeERC20.safeTransferFrom(erc20Token, msg.sender, recipients[i], amounts[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Withdraws the remaining ETH or ERC20 tokens to the owner's address\\n   * @param token The address of the ERC20 token, or 0 for ETH\\n   */\\n  function withdraw(IERC20 token) external onlyOwner {\\n    if (address(token) == address(0)) {\\n      (bool success, ) = _owner.call{value: address(this).balance, gas: 20000}(\\\"\\\");\\n      if (!success) revert TRANSFER_FAILED();\\n    } else {\\n      token.transfer(_owner, token.balanceOf(address(this)));\\n    }\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x7713446b3dcc5c2af5be96ef0c4e57d7af4c9dcbc01a91a8340922b552f86f1d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060016000553360805260805161145261004360003960008181610380015281816103d0015261048b01526114526000f3fe60806040526004361061004e5760003560e01c80630b1034b11461005a57806351cff8d91461006f5780636f949ad01461008f57806382a86d9e146100a2578063a6471e14146100c257600080fd5b3661005557005b600080fd5b61006d61006836600461100a565b6100e2565b005b34801561007b57600080fd5b5061006d61008a366004611061565b610375565b61006d61009d36600461107e565b610569565b3480156100ae57600080fd5b5061006d6100bd3660046110ea565b61071f565b3480156100ce57600080fd5b5061006d6100dd36600461116d565b61085b565b6100ea610a7c565b81818060005b818110156101b35760006101058260016111df565b90505b828110156101a057848482818110610122576101226111f2565b90506020020160208101906101379190611061565b6001600160a01b0316858584818110610152576101526111f2565b90506020020160208101906101679190611061565b6001600160a01b03160361018e57604051632f119e0960e11b815260040160405180910390fd5b8061019881611208565b915050610108565b50806101ab81611208565b9150506100f0565b50348460006101c28284611237565b905060006101d0838561124b565b905060198311806101e15750600283105b156101ff5760405163393f616160e01b815260040160405180910390fd5b60005b8381101561031a5760008a8a8381811061021e5761021e6111f2565b90506020020160208101906102339190611061565b6001600160a01b03160361025a5760405163290802d360e11b815260040160405180910390fd5b8260008290036102715761026e83826111df565b90505b60008b8b84818110610285576102856111f2565b905060200201602081019061029a9190611061565b6001600160a01b031682614e2090604051600060405180830381858888f193505050503d80600081146102e9576040519150601f19603f3d011682016040523d82523d6000602084013e6102ee565b606091505b505090508061031057604051631fa55c0760e11b815260040160405180910390fd5b5050600101610202565b50336001600160a01b03167f87f1eb586b0382990a8813b3bf1c9381de2d895114d7d2fc3277ccc737bcefcd348b8b604051610358939291906112a8565b60405180910390a2505050505050506103716001600055565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103be5760405163d238ed5960e01b815260040160405180910390fd5b6001600160a01b0381166104655760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031647614e2090604051600060405180830381858888f193505050503d806000811461043e576040519150601f19603f3d011682016040523d82523d6000602084013e610443565b606091505b505090508061037157604051631fa55c0760e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb907f00000000000000000000000000000000000000000000000000000000000000009083906370a0823190602401602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f791906112cb565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610542573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037191906112e4565b50565b610571610a7c565b83838060005b8181101561063a57600061058c8260016111df565b90505b82811015610627578484828181106105a9576105a96111f2565b90506020020160208101906105be9190611061565b6001600160a01b03168585848181106105d9576105d96111f2565b90506020020160208101906105ee9190611061565b6001600160a01b03160361061557604051632f119e0960e11b815260040160405180910390fd5b8061061f81611208565b91505061058f565b508061063281611208565b915050610577565b50600061064a8888888834610aa6565b9050336001600160a01b03167fce4a1ba06513226cf23618c48cd2a2d391b00be6079ac669924fa0218cca152b348a8a8a8a60405161068d959493929190611338565b60405180910390a2801561070b576040516000903390614e2090849084818181858888f193505050503d80600081146106e2576040519150601f19603f3d011682016040523d82523d6000602084013e6106e7565b606091505b505090508061070957604051631fa55c0760e11b815260040160405180910390fd5b505b505050506107196001600055565b50505050565b610727610a7c565b83838060005b818110156107f05760006107428260016111df565b90505b828110156107dd5784848281811061075f5761075f6111f2565b90506020020160208101906107749190611061565b6001600160a01b031685858481811061078f5761078f6111f2565b90506020020160208101906107a49190611061565b6001600160a01b0316036107cb57604051632f119e0960e11b815260040160405180910390fd5b806107d581611208565b915050610745565b50806107e881611208565b91505061072d565b506107fe8888888888610c88565b336001600160a01b03167f4114dcfe2aaaf6aa4f0734763cbe121058528a2e296173d8a63900e13966e064888888888d60405161083f959493929190611365565b60405180910390a25050506108546001600055565b5050505050565b610863610a7c565b82828060005b8181101561092c57600061087e8260016111df565b90505b828110156109195784848281811061089b5761089b6111f2565b90506020020160208101906108b09190611061565b6001600160a01b03168585848181106108cb576108cb6111f2565b90506020020160208101906108e09190611061565b6001600160a01b03160361090757604051632f119e0960e11b815260040160405180910390fd5b8061091181611208565b915050610881565b508061092481611208565b915050610869565b5084601981118061093d5750600281105b1561095b5760405163393f616160e01b815260040160405180910390fd5b60006109678287611237565b90506000610975838861124b565b905060005b83811015610a245760008a8a83818110610996576109966111f2565b90506020020160208101906109ab9190611061565b6001600160a01b0316036109d25760405163290802d360e11b815260040160405180910390fd5b8260008290036109e9576109e683826111df565b90505b610a1b8c338d8d86818110610a0057610a006111f2565b9050602002016020810190610a159190611061565b84610dc5565b5060010161097a565b50336001600160a01b03167f76a95c273288c88de8fb190aa9eb3e12866d73a32acf083fa4642a89b7fa523d888b8b8e604051610a6494939291906113a7565b60405180910390a25050505050506107196001600055565b600260005403610a9f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600084838114610ac95760405163b68600c760e01b815260040160405180910390fd5b6019811180610ad85750600281105b15610af65760405163393f616160e01b815260040160405180910390fd5b6000805b82811015610c71576000898983818110610b1657610b166111f2565b9050602002016020810190610b2b9190611061565b6001600160a01b031603610b525760405163290802d360e11b815260040160405180910390fd5b868682818110610b6457610b646111f2565b90506020020135600003610b8b57604051631161496d60e01b815260040160405180910390fd5b868682818110610b9d57610b9d6111f2565b9050602002013582610baf91906111df565b91506000898983818110610bc557610bc56111f2565b9050602002016020810190610bda9190611061565b6001600160a01b0316888884818110610bf557610bf56111f2565b90506020020135614e2090604051600060405180830381858888f193505050503d8060008114610c41576040519150601f19603f3d011682016040523d82523d6000602084013e610c46565b606091505b5050905080610c6857604051631fa55c0760e11b815260040160405180910390fd5b50600101610afa565b50610c7c81856113da565b98975050505050505050565b82818114610ca95760405163b68600c760e01b815260040160405180910390fd5b6019811180610cb85750600281105b15610cd65760405163393f616160e01b815260040160405180910390fd5b60005b81811015610dbc576000868683818110610cf557610cf56111f2565b9050602002016020810190610d0a9190611061565b6001600160a01b031603610d315760405163290802d360e11b815260040160405180910390fd5b838382818110610d4357610d436111f2565b90506020020135600003610d6a57604051631161496d60e01b815260040160405180910390fd5b610db48733888885818110610d8157610d816111f2565b9050602002016020810190610d969190611061565b878786818110610da857610da86111f2565b90506020020135610dc5565b600101610cd9565b50505050505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092019092526020810180516001600160e01b03166323b872dd60e01b17905261071991869190600090610e2b90841683610e83565b90508051600014158015610e50575080806020019051810190610e4e91906112e4565b155b15610e7e57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060610e9183836000610e9a565b90505b92915050565b606081471015610ebf5760405163cd78605960e01b8152306004820152602401610e75565b600080856001600160a01b03168486604051610edb91906113ed565b60006040518083038185875af1925050503d8060008114610f18576040519150601f19603f3d011682016040523d82523d6000602084013e610f1d565b606091505b5091509150610f2d868383610f39565b925050505b9392505050565b606082610f4e57610f4982610f95565b610f32565b8151158015610f6557506001600160a01b0384163b155b15610f8e57604051639996b31560e01b81526001600160a01b0385166004820152602401610e75565b5080610f32565b805115610fa55780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f840112610fd057600080fd5b50813567ffffffffffffffff811115610fe857600080fd5b6020830191508360208260051b850101111561100357600080fd5b9250929050565b6000806020838503121561101d57600080fd5b823567ffffffffffffffff81111561103457600080fd5b61104085828601610fbe565b90969095509350505050565b6001600160a01b038116811461056657600080fd5b60006020828403121561107357600080fd5b8135610f328161104c565b6000806000806040858703121561109457600080fd5b843567ffffffffffffffff808211156110ac57600080fd5b6110b888838901610fbe565b909650945060208701359150808211156110d157600080fd5b506110de87828801610fbe565b95989497509550505050565b60008060008060006060868803121561110257600080fd5b853561110d8161104c565b9450602086013567ffffffffffffffff8082111561112a57600080fd5b61113689838a01610fbe565b9096509450604088013591508082111561114f57600080fd5b5061115c88828901610fbe565b969995985093965092949392505050565b6000806000806060858703121561118357600080fd5b843561118e8161104c565b9350602085013567ffffffffffffffff8111156111aa57600080fd5b6111b687828801610fbe565b9598909750949560400135949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e9457610e946111c9565b634e487b7160e01b600052603260045260246000fd5b60006001820161121a5761121a6111c9565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261124657611246611221565b500490565b60008261125a5761125a611221565b500690565b8183526000602080850194508260005b8581101561129d5781356112828161104c565b6001600160a01b03168752958201959082019060010161126f565b509495945050505050565b8381526040602082015260006112c260408301848661125f565b95945050505050565b6000602082840312156112dd57600080fd5b5051919050565b6000602082840312156112f657600080fd5b81518015158114610f3257600080fd5b81835260006001600160fb1b0383111561131f57600080fd5b8260051b80836020870137939093016020019392505050565b85815260606020820152600061135260608301868861125f565b8281036040840152610c7c818587611306565b60608152600061137960608301878961125f565b828103602084015261138c818688611306565b91505060018060a01b03831660408301529695505050505050565b8481526060602082015260006113c160608301858761125f565b905060018060a01b038316604083015295945050505050565b81810381811115610e9457610e946111c9565b6000825160005b8181101561140e57602081860181015185830152016113f4565b50600092019182525091905056fea2646970667358221220a4c708dfeadea6b0e4caf3c73ae7566daf8851ba0e7c6fad00a21a169ad3604764736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80630b1034b11461005a57806351cff8d91461006f5780636f949ad01461008f57806382a86d9e146100a2578063a6471e14146100c257600080fd5b3661005557005b600080fd5b61006d61006836600461100a565b6100e2565b005b34801561007b57600080fd5b5061006d61008a366004611061565b610375565b61006d61009d36600461107e565b610569565b3480156100ae57600080fd5b5061006d6100bd3660046110ea565b61071f565b3480156100ce57600080fd5b5061006d6100dd36600461116d565b61085b565b6100ea610a7c565b81818060005b818110156101b35760006101058260016111df565b90505b828110156101a057848482818110610122576101226111f2565b90506020020160208101906101379190611061565b6001600160a01b0316858584818110610152576101526111f2565b90506020020160208101906101679190611061565b6001600160a01b03160361018e57604051632f119e0960e11b815260040160405180910390fd5b8061019881611208565b915050610108565b50806101ab81611208565b9150506100f0565b50348460006101c28284611237565b905060006101d0838561124b565b905060198311806101e15750600283105b156101ff5760405163393f616160e01b815260040160405180910390fd5b60005b8381101561031a5760008a8a8381811061021e5761021e6111f2565b90506020020160208101906102339190611061565b6001600160a01b03160361025a5760405163290802d360e11b815260040160405180910390fd5b8260008290036102715761026e83826111df565b90505b60008b8b84818110610285576102856111f2565b905060200201602081019061029a9190611061565b6001600160a01b031682614e2090604051600060405180830381858888f193505050503d80600081146102e9576040519150601f19603f3d011682016040523d82523d6000602084013e6102ee565b606091505b505090508061031057604051631fa55c0760e11b815260040160405180910390fd5b5050600101610202565b50336001600160a01b03167f87f1eb586b0382990a8813b3bf1c9381de2d895114d7d2fc3277ccc737bcefcd348b8b604051610358939291906112a8565b60405180910390a2505050505050506103716001600055565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103be5760405163d238ed5960e01b815260040160405180910390fd5b6001600160a01b0381166104655760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031647614e2090604051600060405180830381858888f193505050503d806000811461043e576040519150601f19603f3d011682016040523d82523d6000602084013e610443565b606091505b505090508061037157604051631fa55c0760e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb907f00000000000000000000000000000000000000000000000000000000000000009083906370a0823190602401602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f791906112cb565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610542573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037191906112e4565b50565b610571610a7c565b83838060005b8181101561063a57600061058c8260016111df565b90505b82811015610627578484828181106105a9576105a96111f2565b90506020020160208101906105be9190611061565b6001600160a01b03168585848181106105d9576105d96111f2565b90506020020160208101906105ee9190611061565b6001600160a01b03160361061557604051632f119e0960e11b815260040160405180910390fd5b8061061f81611208565b91505061058f565b508061063281611208565b915050610577565b50600061064a8888888834610aa6565b9050336001600160a01b03167fce4a1ba06513226cf23618c48cd2a2d391b00be6079ac669924fa0218cca152b348a8a8a8a60405161068d959493929190611338565b60405180910390a2801561070b576040516000903390614e2090849084818181858888f193505050503d80600081146106e2576040519150601f19603f3d011682016040523d82523d6000602084013e6106e7565b606091505b505090508061070957604051631fa55c0760e11b815260040160405180910390fd5b505b505050506107196001600055565b50505050565b610727610a7c565b83838060005b818110156107f05760006107428260016111df565b90505b828110156107dd5784848281811061075f5761075f6111f2565b90506020020160208101906107749190611061565b6001600160a01b031685858481811061078f5761078f6111f2565b90506020020160208101906107a49190611061565b6001600160a01b0316036107cb57604051632f119e0960e11b815260040160405180910390fd5b806107d581611208565b915050610745565b50806107e881611208565b91505061072d565b506107fe8888888888610c88565b336001600160a01b03167f4114dcfe2aaaf6aa4f0734763cbe121058528a2e296173d8a63900e13966e064888888888d60405161083f959493929190611365565b60405180910390a25050506108546001600055565b5050505050565b610863610a7c565b82828060005b8181101561092c57600061087e8260016111df565b90505b828110156109195784848281811061089b5761089b6111f2565b90506020020160208101906108b09190611061565b6001600160a01b03168585848181106108cb576108cb6111f2565b90506020020160208101906108e09190611061565b6001600160a01b03160361090757604051632f119e0960e11b815260040160405180910390fd5b8061091181611208565b915050610881565b508061092481611208565b915050610869565b5084601981118061093d5750600281105b1561095b5760405163393f616160e01b815260040160405180910390fd5b60006109678287611237565b90506000610975838861124b565b905060005b83811015610a245760008a8a83818110610996576109966111f2565b90506020020160208101906109ab9190611061565b6001600160a01b0316036109d25760405163290802d360e11b815260040160405180910390fd5b8260008290036109e9576109e683826111df565b90505b610a1b8c338d8d86818110610a0057610a006111f2565b9050602002016020810190610a159190611061565b84610dc5565b5060010161097a565b50336001600160a01b03167f76a95c273288c88de8fb190aa9eb3e12866d73a32acf083fa4642a89b7fa523d888b8b8e604051610a6494939291906113a7565b60405180910390a25050505050506107196001600055565b600260005403610a9f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600084838114610ac95760405163b68600c760e01b815260040160405180910390fd5b6019811180610ad85750600281105b15610af65760405163393f616160e01b815260040160405180910390fd5b6000805b82811015610c71576000898983818110610b1657610b166111f2565b9050602002016020810190610b2b9190611061565b6001600160a01b031603610b525760405163290802d360e11b815260040160405180910390fd5b868682818110610b6457610b646111f2565b90506020020135600003610b8b57604051631161496d60e01b815260040160405180910390fd5b868682818110610b9d57610b9d6111f2565b9050602002013582610baf91906111df565b91506000898983818110610bc557610bc56111f2565b9050602002016020810190610bda9190611061565b6001600160a01b0316888884818110610bf557610bf56111f2565b90506020020135614e2090604051600060405180830381858888f193505050503d8060008114610c41576040519150601f19603f3d011682016040523d82523d6000602084013e610c46565b606091505b5050905080610c6857604051631fa55c0760e11b815260040160405180910390fd5b50600101610afa565b50610c7c81856113da565b98975050505050505050565b82818114610ca95760405163b68600c760e01b815260040160405180910390fd5b6019811180610cb85750600281105b15610cd65760405163393f616160e01b815260040160405180910390fd5b60005b81811015610dbc576000868683818110610cf557610cf56111f2565b9050602002016020810190610d0a9190611061565b6001600160a01b031603610d315760405163290802d360e11b815260040160405180910390fd5b838382818110610d4357610d436111f2565b90506020020135600003610d6a57604051631161496d60e01b815260040160405180910390fd5b610db48733888885818110610d8157610d816111f2565b9050602002016020810190610d969190611061565b878786818110610da857610da86111f2565b90506020020135610dc5565b600101610cd9565b50505050505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092019092526020810180516001600160e01b03166323b872dd60e01b17905261071991869190600090610e2b90841683610e83565b90508051600014158015610e50575080806020019051810190610e4e91906112e4565b155b15610e7e57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060610e9183836000610e9a565b90505b92915050565b606081471015610ebf5760405163cd78605960e01b8152306004820152602401610e75565b600080856001600160a01b03168486604051610edb91906113ed565b60006040518083038185875af1925050503d8060008114610f18576040519150601f19603f3d011682016040523d82523d6000602084013e610f1d565b606091505b5091509150610f2d868383610f39565b925050505b9392505050565b606082610f4e57610f4982610f95565b610f32565b8151158015610f6557506001600160a01b0384163b155b15610f8e57604051639996b31560e01b81526001600160a01b0385166004820152602401610e75565b5080610f32565b805115610fa55780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f840112610fd057600080fd5b50813567ffffffffffffffff811115610fe857600080fd5b6020830191508360208260051b850101111561100357600080fd5b9250929050565b6000806020838503121561101d57600080fd5b823567ffffffffffffffff81111561103457600080fd5b61104085828601610fbe565b90969095509350505050565b6001600160a01b038116811461056657600080fd5b60006020828403121561107357600080fd5b8135610f328161104c565b6000806000806040858703121561109457600080fd5b843567ffffffffffffffff808211156110ac57600080fd5b6110b888838901610fbe565b909650945060208701359150808211156110d157600080fd5b506110de87828801610fbe565b95989497509550505050565b60008060008060006060868803121561110257600080fd5b853561110d8161104c565b9450602086013567ffffffffffffffff8082111561112a57600080fd5b61113689838a01610fbe565b9096509450604088013591508082111561114f57600080fd5b5061115c88828901610fbe565b969995985093965092949392505050565b6000806000806060858703121561118357600080fd5b843561118e8161104c565b9350602085013567ffffffffffffffff8111156111aa57600080fd5b6111b687828801610fbe565b9598909750949560400135949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e9457610e946111c9565b634e487b7160e01b600052603260045260246000fd5b60006001820161121a5761121a6111c9565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261124657611246611221565b500490565b60008261125a5761125a611221565b500690565b8183526000602080850194508260005b8581101561129d5781356112828161104c565b6001600160a01b03168752958201959082019060010161126f565b509495945050505050565b8381526040602082015260006112c260408301848661125f565b95945050505050565b6000602082840312156112dd57600080fd5b5051919050565b6000602082840312156112f657600080fd5b81518015158114610f3257600080fd5b81835260006001600160fb1b0383111561131f57600080fd5b8260051b80836020870137939093016020019392505050565b85815260606020820152600061135260608301868861125f565b8281036040840152610c7c818587611306565b60608152600061137960608301878961125f565b828103602084015261138c818688611306565b91505060018060a01b03831660408301529695505050505050565b8481526060602082015260006113c160608301858761125f565b905060018060a01b038316604083015295945050505050565b81810381811115610e9457610e946111c9565b6000825160005b8181101561140e57602081860181015185830152016113f4565b50600092019182525091905056fea2646970667358221220a4c708dfeadea6b0e4caf3c73ae7566daf8851ba0e7c6fad00a21a169ad3604764736f6c63430008140033",
  "devdoc": {
    "details": "This is intended for research and development purposes only. Use this contract at your own risk and discretion.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "splitERC20(address,address[],uint256[])": {
        "params": {
          "amounts": "The amounts each recipient shall receive",
          "recipients": "The noble recipients of the ERC20 tokens",
          "token": "The token of friendship to be shared amongst the recipients"
        }
      },
      "splitETH(address[],uint256[])": {
        "params": {
          "amounts": "The amounts each recipient shall receive",
          "recipients": "The noble recipients of the ETH"
        }
      },
      "splitEqualERC20(address,address[],uint256)": {
        "params": {
          "recipients": "The noble recipients of the ERC20 tokens",
          "token": "The token of friendship to be shared amongst the recipients",
          "totalAmount": "The total amount to be shared"
        }
      },
      "splitEqualETH(address[])": {
        "details": "The contract gracefully adds any leftover dust to the amount to be received by the first recipient in the input array.",
        "params": {
          "recipients": "The noble recipients of the ETH"
        }
      },
      "withdraw(address)": {
        "params": {
          "token": "The address of the ERC20 token, or 0 for ETH"
        }
      }
    },
    "title": "ETHSplitter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "The constructor sets the owner of the contract"
      },
      "splitERC20(address,address[],uint256[])": {
        "notice": "Splits the ERC20 tokens amongst the given recipients, according to the specified amounts"
      },
      "splitETH(address[],uint256[])": {
        "notice": "Splits the ETH amongst the given recipients, according to the specified amounts"
      },
      "splitEqualERC20(address,address[],uint256)": {
        "notice": "Splits the ERC20 tokens equally amongst the given recipients"
      },
      "splitEqualETH(address[])": {
        "notice": "Splits the ETH equally amongst the given recipients"
      },
      "withdraw(address)": {
        "notice": "Withdraws the remaining ETH or ERC20 tokens to the owner's address"
      }
    },
    "notice": "A smart contract to split ETH or ERC20 tokens between multiple recipients.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1375,
        "contract": "contracts/Splitter.sol:ETHSplitter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}